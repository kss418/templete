{
	"sa": {
  "prefix": ">>sa",
  "body": [
    "class _sa{",
    "public:",
    "    ll n, d, k = 0; vector <ll> arr;",
    "    vector <ll> sa, pos, tmp, lcp;",
    "    bool cmp(ll a, ll b){",
    "        if(pos[a] != pos[b]) return pos[a] < pos[b];",
    "        a += d; b += d;",
    "        if(a < n && b < n) return pos[a] < pos[b];",
    "        return a > b;",
    "    }  ",
    "",
    "    void init(string& s){ for(auto& i : s) arr.push_back(i); init(); }",
    "    void init(vector <ll>& a){ this->arr = a; init(); }",
    "",
    "    void init(){",
    "        this->n = arr.size(); tmp.resize(n);",
    "        sa.resize(n); pos.resize(n);",
    "        iota(all(sa), 0); lcp.resize(n);",
    "        for(int i = 0;i < n;i++) pos[i] = arr[i];",
    "        get_sa(); get_lcp();",
    "    }",
    "",
    "    void get_sa(){",
    "        for(d = 1; ;d <<= 1){",
    "            sort(all(sa), [this](ll a, ll b) { return cmp(a, b); }); tmp[0] = 0;",
    "            for(int i = 0;i < n - 1;i++) {",
    "                tmp[i + 1] = tmp[i] + cmp(sa[i], sa[i + 1]);",
    "            }",
    "            for(int i = 0;i < n;i++) pos[sa[i]] = tmp[i];",
    "            if(tmp[n - 1] == n - 1) break;",
    "        }",
    "    }",
    "",
    "    void get_lcp(){",
    "        for(int cur = 0;cur < n;cur++){",
    "            k = max(k - 1, 0ll);",
    "            if(pos[cur] == n - 1) continue;",
    "            ll nxt = sa[pos[cur] + 1];",
    "            while(arr[cur + k] == arr[nxt + k]) k++;",
    "            lcp[pos[cur]] = k;",
    "        }",
    "    }",
    "",
    "    _sa(string& s){ init(s); }",
    "    _s"
  ],
  "description": "sa"
}
}