{
	"lcs": {
  "prefix": ">>lcs",
  "body": [
    "class _lcs {",
    "public:",
    "    string a, b; vector<vector<ll>> dp;",
    "    ll n, m;",
    "",
    "    _lcs(string a, string b) {",
    "        this->a = a; this->b = b;",
    "        this->n = a.size(), this->m = b.size();",
    "        dp.resize(n + 1, vector<ll>(m + 1, 0));",
    "    }",
    "",
    "    void init() {",
    "        for (int i = 0; i < n; i++) {",
    "            for (int j = 0; j < m; j++) {",
    "                if (a[i] == b[j]) {",
    "                    dp[i + 1][j + 1] = dp[i][j] + 1;",
    "                }",
    "                else {",
    "                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);",
    "                }",
    "            }",
    "        }",
    "    }",
    "",
    "    ll ret() { // lcs 길이 반환",
    "        return dp[n][m];",
    "    }",
    "",
    "    string track() { // lcs string 반환",
    "        string ret;",
    "        ll cy = n, cx = m;",
    "        while (cy && cx) {",
    "            if (a[cy - 1] == b[cx - 1]) {",
    "                ret.push_back(a[cy - 1]); cy--; cx--;",
    "            }",
    "            else if (dp[cy - 1][cx] > dp[cy][cx - 1]) cy--;",
    "            else cx--;",
    "        }",
    "",
    "        reverse(ret.begin(), ret.end());",
    "        return ret;",
    "    }",
    "};"
  ],
  "description": "lcs"
}
}