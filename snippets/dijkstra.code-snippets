{
	"dijkstra": {
  "prefix": ">>dij",
  "body": [
    "class _dij {",
    "public:",
    "    class node{",
    "    public:",
    "        ll d;",
    "        node() : node(0){}",
    "        node(ll d) : d(d){}",
    "        ll num() const{ return d; }",
    "        bool operator<(const node& ot) const{ return num() < ot.num(); }",
    "        bool operator>(const node& ot) const{ return num() > ot.num(); }",
    "        bool operator==(const node& ot) const{ return num() == ot.num(); }",
    "        bool operator<=(const node& ot) const{ return num() <= ot.num(); }",
    "        node operator+(const node& ot) const{",
    "            return {d + ot.d};",
    "        }",
    "        operator ll(){ return d; }",
    "    };",
    "    node mx(){ return {INF}; }",
    "    node mn(){ return {0}; }",
    "",
    "    using ptl = pair <node, ll>;",
    "    ll n; vector <node> d;",
    "    vector <ll> pre;",
    "    vector <vector<ptl>> adj;",
    "    priority_queue <ptl, vector<ptl>, greater<ptl>> pq;",
    "",
    "    _dij(){}",
    "    _dij(ll n) { this->n = n; adj.resize(n + 1); }",
    "",
    "    void add(ll st, ll en, node c) { // 양방향",
    "        adj[st].push_back({ c,en });",
    "        adj[en].push_back({ c,st });",
    "    }",
    "    void addsol(ll st, ll en, node c) { // 단방향",
    "        adj[st].push_back({ c,en });",
    "    }",
    "",
    "    void init(ll st) {",
    "        d.clear(); pre.clear();",
    "        d.resize(n + 1, mx()); pre.resize(n + 1, -1); ",
    "        pq.push({ mn(), st });",
    "        d[st] = mn();",
    "",
    "        while (!pq.empty()) {",
    "            auto [cn, cur] = pq.top(); pq.pop();",
    "            if(cn > d[cur]) continue;",
    "            ",
    "            for (auto& i : adj[cur]) {",
    "                auto [nn, nxt] = i;",
    "                node pl = nn + cn;",
    "        ",
    "                if (d[nxt] <= pl) continue;",
    "                d[nxt] = pl; pre[nxt] = cur; ",
    "                pq.push({ pl, nxt });",
    "            }",
    "        }",
    "    }",
    "",
    "    node ret(ll n) { return d[n]; }",
    "};"
  ],
  "description": "dijkstra"
}
}