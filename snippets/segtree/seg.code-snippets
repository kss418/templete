{
"seg": {
  "prefix": ">>seg",
  "body": [
    "template <typename T = ll> // query type",
    "class _seg { // 구간 예외 처리하기",
    "public:",
    "    ll n, sz;",
    "    class node{",
    "    public:",
    "        ll v;",
    "        node() : node(0){} // identity",
    "        node(ll v) : v(v) {}",
    "        ",
    "        node operator += (node ot){ // add",
    "            v += ot.v;",
    "            return *this;",
    "        }",
    "",
    "        operator T(){ // query",
    "            return v;",
    "        }",
    "    };",
    "    vector <node> seg;",
    "",
    "    _seg(){}",
    "    _seg(ll n) : n(n){ ",
    "        sz = 1; while(sz < n) sz <<= 1ll;",
    "        seg.assign(2 * sz, _seg::node());",
    "    }",
    "",
    "    node merge(node l, node r){",
    "        return{",
    "            l.v + r.v",
    "        };",
    "    }",
    "",
    "    node query(ll st, ll en) {",
    "        st = max(1ll, st); en = min(n, en);",
    "        if(st > en) return _seg::node();",
    "",
    "        node l = _seg::node(), r = _seg::node();",
    "        st += sz - 1; en += sz - 1;",
    "        while(st <= en){",
    "            if(st & 1) l = merge(l, seg[st++]);",
    "            if(!(en & 1)) r = merge(seg[en--], r);",
    "            st >>= 1; en >>= 1; ",
    "        }",
    "",
    "        return merge(l, r);",
    "    }",
    "",
    "    void set(ll idx, node val){",
    "        if(idx < 1 || idx > n) return;",
    "        ll p = idx + sz - 1;",
    "        seg[p] = val;",
    "        for(p >>= 1ll; p; p >>= 1){",
    "            seg[p] = merge(seg[p << 1], seg[p << 1 | 1]);",
    "        }",
    "    }",
    "",
    "    void add(ll idx, node val){",
    "        if(idx < 1 || idx > n) return;",
    "        ll p = idx + sz - 1;",
    "        seg[p] += val;",
    "        for(p >>= 1; p; p >>= 1){",
    "            seg[p] = merge(seg[p << 1], seg[p << 1 | 1]);",
    "        }",
    "    }",
    "",
    "    void clear(){ fill(all(seg), node()); }",
    "};"
  ],
  "description": "seg"
}
}