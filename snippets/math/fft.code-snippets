{
	"fft": {
  "prefix": ">>fft",
  "body": [
    "class _fft{",
    "public:",
    "    const ld PI = acos(-1);",
    "    using cpd = complex <double>;",
    "",
    "    void fft(vector <cpd>& v, bool inv = 0){",
    "        ll n = v.size();",
    "        for(int i = 1,j = 0;i < n;i++){",
    "            ll bit = n >> 1ll;",
    "            for(;j >= bit;bit >>= 1ll) j -= bit;",
    "            j += bit;",
    "            if(i < j) swap(v[i], v[j]);",
    "        }",
    "",
    "        for(int k = 1;k < n;k <<= 1ll){",
    "            double a = PI / k * (inv ? 1 : -1);",
    "            cpd w(cos(a), sin(a));",
    "            for(int i = 0;i < n;i += 2 * k){",
    "                cpd wp(1, 0);",
    "                for(int j = 0;j < k;j++){",
    "                    cpd x = v[i + j], y = v[i + j + k] * wp;",
    "                    v[i + j] = x + y;",
    "                    v[i + j + k] = x - y;",
    "                    wp *= w;",
    "                }",
    "            }",
    "        }",
    "",
    "        if(inv) for(int i = 0;i < n;i++) v[i] /= n;",
    "    }  ",
    "        ",
    "    vector <ll> mul(vector <ll>& a, vector <ll>& b){",
    "        vector<cpd> av(all(a)), bv(all(b));",
    "        ll n = 2;",
    "        while(n < a.size() + b.size()) n <<= 1;",
    "        av.resize(n); bv.resize(n);",
    "        fft(av); fft(bv);",
    "        for(int i = 0;i < n;i++) av[i] *= bv[i];",
    "        fft(av, 1);",
    "",
    "        vector <ll> ret(n);",
    "        for(int i = 0;i < n;i++) ret[i] = round(av[i].real());",
    "    ",
    "        return ret;",
    "    }",
    "        ",
    "    vector <ll> carry(vector <ll>& a, vector <ll>& b){",
    "        reverse(all(a)); reverse(all(b));",
    "        vector <ll> ret = mul(a, b);",
    "",
    "        for(int i = 0;i < ret.size();i++){",
    "            if(ret[i] < 10) continue;",
    "            if(i < ret.size() - 1) ret[i + 1] += ret[i] / 10;",
    "            else ret.push_back(ret[i] / 10);",
    "            ret[i] %= 10;",
    "        }",
    "        ",
    "        while(!ret.empty() && !ret.back()) ret.pop_back();",
    "        if(ret.empty()) return vector<ll>(1, 0);",
    "        reverse(all(ret));",
    "        return ret;",
    "    }",
    "};"
  ],
  "description": "fft"
}
}