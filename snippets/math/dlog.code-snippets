{
	"dlog": {
  "prefix": ">>dlog",
  "body": [
    "class _dlog{",
    "public:",
    "    map<ll, ll> num; vector <ll> prime;",
    "    _dlog(){};",
    "",
    "    void factor(ll p){ // 소인수분해",
    "        prime.clear();  ",
    "        for(ll i = 2;i * i <= p;i++){",
    "            if(p % i) continue;",
    "            prime.push_back(i);",
    "            if(i * i != p) prime.push_back(p / i);",
    "        }",
    "    }",
    "",
    "    ll phi(ll p){ ",
    "        factor(p); ll ret = p;",
    "        for(auto& i : prime) ret /= i, ret *= i - 1;",
    "        return ret;",
    "    }",
    "",
    "    ll sqrt(ll num){",
    "        ll lo = 0, hi = num;",
    "        while(hi > lo){",
    "            ll mid = (lo + hi + 1) >> 1;",
    "            if(mid * mid < num) lo = mid;",
    "            else hi = mid - 1;",
    "        }",
    "        return lo;",
    "    }",
    "",
    "    ll pow(ll a, ll b, ll p){",
    "        ll ret = 1;",
    "        while(b){",
    "            if(b & 1) ret *= a % p, ret %= p;",
    "            a *= a; a %= p; b >>= 1;",
    "        }      ",
    "        return ret;",
    "    }",
    "    ",
    "    ll ret(ll a, ll b, ll p) { // a^x = b (mod p), ret x",
    "        ll mx = sqrt(phi(p)) + 1; num.clear();",
    "        ll inv = pow(a, p - 2, p), cur = b;",
    "        for(int i = 0;i < mx;i++) {",
    "            if(num.find(cur) == num.end()) num[cur] = i;",
    "            cur *= inv; cur %= p;",
    "        }",
    "        cur = 1; for(int i = 0;i < mx;i++){",
    "            if(num.find(cur) != num.end()) return i * mx + num[cur];",
    "            cur *= pow(a, mx, p); cur %= p;",
    "        }",
    "        return -1;",
    "    }",
    "};"
  ],
  "description": "dlog"
}
}