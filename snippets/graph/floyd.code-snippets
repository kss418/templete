{
	"floyd": {
  "prefix": ">>floyd",
  "body": [
    "template <typename T = ll> // 1-based index",
    "class _floyd { // ret(i,j) == INF 처리하기",
    "public:",
    "    ll n; vector <vector<T>> d, nxt;",
    "    vector <ll> tr;",
    "",
    "    _floyd(ll n) {",
    "        this->n = n;",
    "        d.resize(n + 1, vector<T>(n + 1, INF));",
    "        nxt.resize(n + 1, vector<T>(n + 1, 0));",
    "    }",
    "",
    "    void add(ll st, ll en, T c = 1) { //양방향",
    "        d[st][en] = min(d[st][en], c);",
    "        d[en][st] = min(d[en][st], c);",
    "        nxt[st][en] = en; nxt[en][st] = st;",
    "    }",
    "",
    "    void addsol(ll st, ll en, T c = 1) { //단방향",
    "        d[st][en] = min(d[st][en], c);",
    "        nxt[st][en] = en;",
    "    }",
    "",
    "    void init() {",
    "        for (int k = 1; k <= n; k++) {",
    "            for (int i = 1; i <= n; i++) {",
    "                for (int j = 1; j <= n; j++) {",
    "                    if (d[i][j] <= d[i][k] + d[k][j]) continue;",
    "                    d[i][j] = d[i][k] + d[k][j];",
    "                    nxt[i][j] = nxt[i][k];",
    "                }",
    "            }",
    "        }",
    "    }",
    "",
    "    T ret(ll st, ll en) {",
    "        return d[st][en];",
    "    }",
    "",
    "    vector <ll> track(ll st, ll en) {",
    "        ll cur = st; tr.clear();",
    "",
    "        while (cur != en) {",
    "            tr.push_back(cur);",
    "            cur = nxt[cur][en];",
    "        }",
    "        tr.push_back(en);",
    "",
    "        return tr;",
    "    }",
    "};"
  ],
  "description": "floyd"
}
}